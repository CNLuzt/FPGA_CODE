// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "01/09/2021 12:19:35"
                                                                                
// Verilog Test Bench template for design : iic
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module iic_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg treg_iic_sda;
reg rd;
reg rst_n;
reg [15:0] word_addr;
reg wr;
reg [7:0] wr_data;
// wires                                               
wire done;
wire iic_scl;
wire iic_sda;
wire [7:0]  rd_data;
wire rd_data_valid;
wire wr_data_valid;

localparam NUM 		= 	6'd4;	//单次读写数据字节
// localparam DevAddr	= 	3'b000;	//IIC器件的器件地址
// localparam WdAr_NUM = 	2;		//IIC器件存储器地址字节数

// assign statements (if any)                          
assign iic_sda = treg_iic_sda;
iic i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.done(done),
	.iic_scl(iic_scl),
	.iic_sda(iic_sda),
	.rd(rd),
	.rd_data(rd_data),
	.rd_data_valid(rd_data_valid),
	.rst_n(rst_n),
	.word_addr(word_addr),
	.wr(wr),
	.wr_data(wr_data),
	.wr_data_valid(wr_data_valid)
);

M24LC64 M24LC64(
	.A0(1'b0)		,
	.A1(1'b0)		,
	.A2(1'b0)		,
	.WP(1'b0)		,
	.SDA(iic_sda)	,
	.SCL(iic_scl)	,
	.RESET(!rst_n)
);

//时钟周期，单位ns，在这里修改时钟周期
parameter CYCLE = 20;

//复位时间，此时表示复位3个时钟周期的时间
parameter RST_TIME = 200;

//生成本地时钟50M
initial begin
	clk = 0;
	forever
	#(CYCLE/2)
	clk=~clk;
end

//产生复位信号
initial begin
		rst_n = 0;
		word_addr = 0;
		wr = 0;
		wr_data = 0;
		rd = 0;
		#(CYCLE * 200 + 1)
		rst_n = 1;
		#200;
	end

end
//输入信号din0赋值方式
initial begin
	word_addr = 0;
	wr_data = 0;
	repeat(20)begin
		wr = 1'b1;
		#(CYCLE)
		wr = 1'b0;
		repeat(NUM)begin
			@(posedge wr_data_valid)
			wr_data = wr_data + 1;
		end

		@(posedge done);
		#2000
		word_addr = word_addr + NUM;
	end
end

#2000;
word_addr = 0;
repeat(20)begin
	rd = 1'b1;
	#(CYCLE)
	rd = 1'b0;
	@(posedge done)
	#2000
	word_addr = word_addr +NUM;
end

#5000;
$stop;

endmodule

